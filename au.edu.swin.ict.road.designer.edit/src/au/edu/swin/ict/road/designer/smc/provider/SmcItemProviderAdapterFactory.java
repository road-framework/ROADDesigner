/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package au.edu.swin.ict.road.designer.smc.provider;

import au.edu.swin.ict.road.designer.smc.util.SmcAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SmcItemProviderAdapterFactory extends SmcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SmcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.SMC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SMCItemProvider smcItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.SMC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSMCAdapter() {
		if (smcItemProvider == null) {
			smcItemProvider = new SMCItemProvider(this);
		}

		return smcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.Contract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContractItemProvider contractItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.Contract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContractAdapter() {
		if (contractItemProvider == null) {
			contractItemProvider = new ContractItemProvider(this);
		}

		return contractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.ProcessDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessDefinitionItemProvider processDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.ProcessDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessDefinitionAdapter() {
		if (processDefinitionItemProvider == null) {
			processDefinitionItemProvider = new ProcessDefinitionItemProvider(this);
		}

		return processDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.BehaviorTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorTermItemProvider behaviorTermItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.BehaviorTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviorTermAdapter() {
		if (behaviorTermItemProvider == null) {
			behaviorTermItemProvider = new BehaviorTermItemProvider(this);
		}

		return behaviorTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.PlayerBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayerBindingItemProvider playerBindingItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.PlayerBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayerBindingAdapter() {
		if (playerBindingItemProvider == null) {
			playerBindingItemProvider = new PlayerBindingItemProvider(this);
		}

		return playerBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.MessageAnalyzer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageAnalyzerItemProvider messageAnalyzerItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.MessageAnalyzer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageAnalyzerAdapter() {
		if (messageAnalyzerItemProvider == null) {
			messageAnalyzerItemProvider = new MessageAnalyzerItemProvider(this);
		}

		return messageAnalyzerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.ExternalFactLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalFactLinkItemProvider externalFactLinkItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.ExternalFactLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalFactLinkAdapter() {
		if (externalFactLinkItemProvider == null) {
			externalFactLinkItemProvider = new ExternalFactLinkItemProvider(this);
		}

		return externalFactLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.AcquisitionRegime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcquisitionRegimeItemProvider acquisitionRegimeItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.AcquisitionRegime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcquisitionRegimeAdapter() {
		if (acquisitionRegimeItemProvider == null) {
			acquisitionRegimeItemProvider = new AcquisitionRegimeItemProvider(this);
		}

		return acquisitionRegimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.ProvisionRegime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvisionRegimeItemProvider provisionRegimeItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.ProvisionRegime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvisionRegimeAdapter() {
		if (provisionRegimeItemProvider == null) {
			provisionRegimeItemProvider = new ProvisionRegimeItemProvider(this);
		}

		return provisionRegimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.InMsg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InMsgItemProvider inMsgItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.InMsg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInMsgAdapter() {
		if (inMsgItemProvider == null) {
			inMsgItemProvider = new InMsgItemProvider(this);
		}

		return inMsgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.ResultMsg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultMsgItemProvider resultMsgItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.ResultMsg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultMsgAdapter() {
		if (resultMsgItemProvider == null) {
			resultMsgItemProvider = new ResultMsgItemProvider(this);
		}

		return resultMsgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.OutMsg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutMsgItemProvider outMsgItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.OutMsg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutMsgAdapter() {
		if (outMsgItemProvider == null) {
			outMsgItemProvider = new OutMsgItemProvider(this);
		}

		return outMsgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.Term} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermItemProvider termItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.Term}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermAdapter() {
		if (termItemProvider == null) {
			termItemProvider = new TermItemProvider(this);
		}

		return termItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.TaskRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskRefItemProvider taskRefItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.TaskRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskRefAdapter() {
		if (taskRefItemProvider == null) {
			taskRefItemProvider = new TaskRefItemProvider(this);
		}

		return taskRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.Fact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactItemProvider factItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.Fact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactAdapter() {
		if (factItemProvider == null) {
			factItemProvider = new FactItemProvider(this);
		}

		return factItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.System} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemItemProvider systemItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.System}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemAdapter() {
		if (systemItemProvider == null) {
			systemItemProvider = new SystemItemProvider(this);
		}

		return systemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.Player} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayerItemProvider playerItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.Player}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayerAdapter() {
		if (playerItemProvider == null) {
			playerItemProvider = new PlayerItemProvider(this);
		}

		return playerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.FactLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactLinkItemProvider factLinkItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.FactLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactLinkAdapter() {
		if (factLinkItemProvider == null) {
			factLinkItemProvider = new FactLinkItemProvider(this);
		}

		return factLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.FactAccessor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactAccessorItemProvider factAccessorItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.FactAccessor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactAccessorAdapter() {
		if (factAccessorItemProvider == null) {
			factAccessorItemProvider = new FactAccessorItemProvider(this);
		}

		return factAccessorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link au.edu.swin.ict.road.designer.smc.SrcMsg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SrcMsgItemProvider srcMsgItemProvider;

	/**
	 * This creates an adapter for a {@link au.edu.swin.ict.road.designer.smc.SrcMsg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSrcMsgAdapter() {
		if (srcMsgItemProvider == null) {
			srcMsgItemProvider = new SrcMsgItemProvider(this);
		}

		return srcMsgItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (smcItemProvider != null) smcItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (contractItemProvider != null) contractItemProvider.dispose();
		if (processDefinitionItemProvider != null) processDefinitionItemProvider.dispose();
		if (behaviorTermItemProvider != null) behaviorTermItemProvider.dispose();
		if (playerBindingItemProvider != null) playerBindingItemProvider.dispose();
		if (messageAnalyzerItemProvider != null) messageAnalyzerItemProvider.dispose();
		if (externalFactLinkItemProvider != null) externalFactLinkItemProvider.dispose();
		if (acquisitionRegimeItemProvider != null) acquisitionRegimeItemProvider.dispose();
		if (provisionRegimeItemProvider != null) provisionRegimeItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (inMsgItemProvider != null) inMsgItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (resultMsgItemProvider != null) resultMsgItemProvider.dispose();
		if (outMsgItemProvider != null) outMsgItemProvider.dispose();
		if (termItemProvider != null) termItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (taskRefItemProvider != null) taskRefItemProvider.dispose();
		if (factItemProvider != null) factItemProvider.dispose();
		if (systemItemProvider != null) systemItemProvider.dispose();
		if (playerItemProvider != null) playerItemProvider.dispose();
		if (factLinkItemProvider != null) factLinkItemProvider.dispose();
		if (factAccessorItemProvider != null) factAccessorItemProvider.dispose();
		if (srcMsgItemProvider != null) srcMsgItemProvider.dispose();
	}

}
